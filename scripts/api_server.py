#!/usr/bin/env python3
"""
Python API Server for Political Dashboard Data
Serves JSON data generated by Python scripts to Next.js frontend
"""

import json
import os
from pathlib import Path
from typing import Dict, Any
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

app = FastAPI(title="Political Dashboard API", version="1.0.0")

# Enable CORS for Next.js frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Next.js dev server
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Base directory for data files
BASE_DIR = Path(__file__).parent
TRUMP_ADMIN_DIR = BASE_DIR / "trump_admin"

def load_json_file(file_path: Path) -> Dict[str, Any]:
    """Load and return JSON data from file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail=f"Data file not found: {file_path}")
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail=f"Invalid JSON in file: {file_path}")

@app.get("/")
async def root():
    """Health check endpoint"""
    return {"message": "Political Dashboard API is running", "status": "healthy"}

@app.get("/api/economic-data")
async def get_economic_data():
    """Get combined economic data (integration, tariffs, stock)"""
    try:
        economic_dir = TRUMP_ADMIN_DIR / "economic_policy"
        
        # Load the three main economic data files
        integrated_data = load_json_file(economic_dir / "integrated_economic_dashboard.json")
        tariff_data = load_json_file(economic_dir / "tariff_data_clean.json")
        stock_data = load_json_file(economic_dir / "presidential_sp500_comparison.json")
        
        # Extract Trump current term data for quick access
        trump_current = None
        if "presidential_data" in stock_data:
            trump_current = stock_data["presidential_data"].get("Donald Trump (2nd Term)")
        
        return {
            "integrated": integrated_data,
            "tariff": tariff_data,
            "stock": stock_data,
            "trumpCurrent": trump_current
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading economic data: {str(e)}")

@app.get("/api/immigration-data")
async def get_immigration_data():
    """Get immigration enforcement data"""
    try:
        immigration_dir = TRUMP_ADMIN_DIR / "immigration_enforcement" / "data"
        
        ice_data = load_json_file(immigration_dir / "ice_detention_data.json")
        cbp_data = load_json_file(immigration_dir / "cbp_apprehensions_data.json")
        
        return {
            "ice": ice_data,
            "cbp": cbp_data
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading immigration data: {str(e)}")

@app.get("/api/congress-data")
async def get_congress_data():
    """Get congressional analysis data"""
    try:
        congress_dir = BASE_DIR / "congress"
        
        congress_data = load_json_file(congress_dir / "congressional_analysis.json")
        
        return congress_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading congress data: {str(e)}")

@app.get("/api/foreign-affairs-data")
async def get_foreign_affairs_data():
    """Get foreign affairs data"""
    try:
        foreign_dir = BASE_DIR / "foreign_affairs"
        
        foreign_data = load_json_file(foreign_dir / "foreign_affairs_data_condensed.json")
        
        return foreign_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading foreign affairs data: {str(e)}")

@app.get("/api/promises-data")
async def get_promises_data():
    """Get campaign promises data"""
    try:
        promises_dir = TRUMP_ADMIN_DIR / "promises_tracker"
        
        promises_data = load_json_file(promises_dir / "promises.json")
        
        return promises_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading promises data: {str(e)}")

@app.get("/api/data-status")
async def get_data_status():
    """Get status of all data files"""
    status = {
        "economic_policy": {},
        "immigration": {},
        "congress": {},
        "foreign_affairs": {},
        "promises": {}
    }
    
    try:
        # Check economic policy files
        economic_dir = TRUMP_ADMIN_DIR / "economic_policy"
        for file_name in ["integrated_economic_dashboard.json", "tariff_data_clean.json", "presidential_sp500_comparison.json"]:
            file_path = economic_dir / file_name
            status["economic_policy"][file_name] = {
                "exists": file_path.exists(),
                "size": file_path.stat().st_size if file_path.exists() else 0,
                "modified": file_path.stat().st_mtime if file_path.exists() else None
            }
        
        # Check immigration files
        immigration_dir = TRUMP_ADMIN_DIR / "immigration_enforcement" / "data"
        for file_name in ["ice_detention_data.json", "cbp_apprehensions_data.json"]:
            file_path = immigration_dir / file_name
            status["immigration"][file_name] = {
                "exists": file_path.exists(),
                "size": file_path.stat().st_size if file_path.exists() else 0,
                "modified": file_path.stat().st_mtime if file_path.exists() else None
            }
        
        # Check other files
        congress_file = BASE_DIR / "congress" / "congressional_analysis.json"
        status["congress"]["congressional_analysis.json"] = {
            "exists": congress_file.exists(),
            "size": congress_file.stat().st_size if congress_file.exists() else 0,
            "modified": congress_file.stat().st_mtime if congress_file.exists() else None
        }
        
        return status
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error checking data status: {str(e)}")

if __name__ == "__main__":
    print("üöÄ Starting Political Dashboard API Server...")
    print("üìä Serving data from scripts directory")
    print("üåê Next.js frontend: http://localhost:3000")
    print("üîå API server: http://localhost:8000")
    print("üìö API docs: http://localhost:8000/docs")
    
    uvicorn.run(
        "api_server:app",
        host="127.0.0.1",
        port=8000,
        reload=True,
        log_level="info"
    )
